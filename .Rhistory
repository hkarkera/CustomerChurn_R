vars=c("InternetService","Contract","PaymentMethod","tenure_group")
training=sample(row.names(cc), dim(cc)[1]*0.6)
validation=setdiff(row.names(cc), training)
Data <- cbind(cc[,c(vars)],
class.ind(cc[,]$InternetService),
class.ind(cc[,]$Contract),
class.ind(cc[,]$PaymentMethod),
class.ind(cc[,]$tenure_group))
names(Data)=c(vars,
paste("InternetService_", c(1, 2, 3, 4), sep=""), paste("Contract_", c(1, 2, 3), sep=""),paste("PaymentMethod_", c(1,2,3,4), sep=""),paste("tenure_group", c(1,2,3,4), sep=""))
Data[,1:4]<-NULL
ip <- cbind(cc,Data)
ip$InternetService<-NULL
ip$Contract<-NULL
ip$PaymentMethod<-NULL
ip$tenure_group<-NULL
ip$MonthlyCharges<- scale(ip$MonthlyCharges)
indices= sample(nrow(ip), 0.7*nrow(ip))
train = ip[indices, ] #70% of the data
val = ip[-indices,] #30% of the data
nn2<- neuralnet(Churn~SeniorCitizen+Dependents+MultipleLines+OnlineSecurity+TechSupport+StreamingTV+StreamingMovies+PaperlessBilling+MonthlyCharges+InternetService_1+InternetService_2+InternetService_3+InternetService_4+Contract_1+Contract_2+Contract_3,data = train,hidden = 2)
nn3<- neuralnet(Churn~SeniorCitizen+Dependents+MultipleLines+OnlineSecurity+TechSupport+StreamingTV+StreamingMovies+PaperlessBilling+MonthlyCharges+InternetService_1+InternetService_2+InternetService_3+InternetService_4,data = train,hidden = 2)
nn3<- neuralnet(Churn~.,data = train,hidden = 2)
plot(nn3)
training.prediction=compute(nn3, train[,-c(10)])
library(nnet)
training.prediction=compute(nn3, train[,-c(10)])
training.prediction=compute(nn3, train[,])
rf.predict_2 <- predict(nn3, val)
rf.pred2 <- factor(ifelse(rf.predict_2 >= 0.5, "1", "0"))
confusionMatrix(rf.pred2, as.factor(valid_rf$Churn))
confusionMatrix(rf.pred2, as.factor(val$Churn))
# Read File
churn_df <- read.csv("Telco_Customer_Churn.csv")
# Check for NAs
summary(churn_df)
# Remove NAs
churn_df <- na.omit(churn_df)
cc <- churn_df
# Data Wrangling
churn_df$MultipleLines[churn_df$MultipleLines=="No phone service"] <- as.factor("No")
churn_df$OnlineSecurity[churn_df$OnlineSecurity=="No internet service"] <- as.factor("No")
churn_df$OnlineBackup[churn_df$OnlineBackup=="No internet service"] <- as.factor("No")
churn_df$DeviceProtection[churn_df$DeviceProtection=="No internet service"] <- as.factor("No")
churn_df$TechSupport[churn_df$TechSupport=="No internet service"] <- as.factor("No")
churn_df$StreamingTV[churn_df$StreamingTV=="No internet service"] <- as.factor("No")
churn_df$StreamingMovies[churn_df$StreamingMovies=="No internet service"] <- as.factor("No")
churn_df$SeniorCitizen[churn_df$SeniorCitizen==0]<- "No"
churn_df$SeniorCitizen[churn_df$SeniorCitizen==1]<- "Yes"
# Categorizing tenure
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return("0-12 months")
}else if(tenure > 12 & tenure <= 24){
return("12-24 months")
}else if (tenure > 24 & tenure <= 48){
return("24-48 months")
}else if (tenure > 48 & tenure <=60){
return("48-60 months")
}else if (tenure > 60){
return("> 60 months")
}
}
churn_df$tenure_group <- sapply(churn_df$tenure,group_tenure)
churn_df$tenure_group <- as.factor(churn_df$tenure_group)
churn_df$tenure <- NULL
library(dplyr)
library(corrplot)
library(RColorBrewer)
# Correlation plot b/w numerical columns
churn_corr <- select(churn_df,MonthlyCharges,TotalCharges)
corr <- cor(churn_corr)
corrplot(corr,method="number",type="upper", order="hclust")
# Since total charges and monthly charges are highly correlated, reomove total
churn_df$TotalCharges <- NULL
churn_df$customerID <- NULL
library(dplyr)
cc <- select(churn_df,SeniorCitizen,Dependents,MultipleLines,InternetService,OnlineSecurity,TechSupport,StreamingTV,StreamingMovies,Contract,PaperlessBilling,PaymentMethod,MonthlyCharges,tenure_group,Churn)
cc$SeniorCitizen <- 1* (cc$SeniorCitizen == "Yes")
cc$Dependents <- 1* (cc$Dependents == "Yes")
cc$MultipleLines <- 1* (cc$MultipleLines == "Yes")
cc$OnlineSecurity <- 1* (cc$OnlineSecurity == "Yes")
cc$TechSupport <- 1* (cc$TechSupport == "Yes")
cc$StreamingTV <- 1* (cc$StreamingTV == "Yes")
cc$StreamingMovies <- 1* (cc$StreamingMovies == "Yes")
cc$PaperlessBilling <- 1* (cc$PaperlessBilling == "Yes")
cc$Churn <- 1* (cc$Churn == "Yes")
vars=c("InternetService","Contract","PaymentMethod","tenure_group")
training=sample(row.names(cc), dim(cc)[1]*0.6)
validation=setdiff(row.names(cc), training)
library(neuralnet)
library(BART)
Data <- cbind(cc[,c(vars)],
Data <- cbind(cc[,c(vars)],
class.ind(cc[,]$InternetService),
class.ind(cc[,]$Contract),
class.ind(cc[,]$PaymentMethod),
class.ind(cc[,]$tenure_group))
names(Data)=c(vars,
names(Data)=c(vars,
paste("InternetService_", c(1, 2, 3, 4), sep=""), paste("Contract_", c(1, 2, 3), sep=""),paste("PaymentMethod_", c(1,2,3,4), sep=""),paste("tenure_group", c(1,2,3,4), sep=""))
Data <- cbind(cc[,c(vars)],
class.ind(cc[,]$InternetService),
class.ind(cc[,]$Contract),
class.ind(cc[,]$PaymentMethod),
class.ind(cc[,]$tenure_group))
names(Data)=c(vars,
paste("InternetService_", c(1, 2, 3, 4), sep=""), paste("Contract_", c(1, 2, 3), sep=""),paste("PaymentMethod_", c(1,2,3,4), sep=""),paste("tenure_group", c(1,2,3,4), sep=""))
Data[,1:4]<-NULL
ip <- cbind(cc,Data)
ip$InternetService<-NULL
ip$Contract<-NULL
ip$PaymentMethod<-NULL
ip$tenure_group<-NULL
ip$MonthlyCharges<- scale(ip$MonthlyCharges)
indices= sample(nrow(ip), 0.7*nrow(ip))
train = ip[indices, ] #70% of the data
val = ip[-indices,] #30% of the data
nn3<- neuralnet(Churn~.,data = train,hidden = 2)
plot(nn3)
library(nnet)
rf.predict_2 <- predict(nn3, val)
rf.pred2 <- factor(ifelse(rf.predict_2 >= 0.5, "1", "0"))
confusionMatrix(rf.pred2, as.factor(val$Churn))
nn_predict1 <- predict(nn3, val)
nn_pred1 <- factor(ifelse(rf.predict_2 >= 0.5, "1", "0"))
nn_pred1 <- factor(ifelse(nn_predict1 >= 0.5, "1", "0"))
confusionMatrix(nn_pred1, as.factor(val$Churn))
rmse8 <- rmse(nn_pred1,val$Churn)
rmse8 <- rmse(nn_predict1,val$Churn)
rmse_df <- data.frame("Model"=c("LogisticModel1","LogisticModel2","LogisticModel3","DecisionTree1","DecisionTree2","RandomForest1","RandomForest2","NeuralNetwork"), "RMSE"=c(rmse1,rmse2,rmse3,rmse4,rmse5,rmse6,rmse7,rmse8))
rmse1 <- rmse(test_lr_predict1,test_lr$Churn)
library(rpart)
library(rpart)
r1<- rpart(Churn ~ as.factor(SeniorCitizen) + Dependents + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group,train_lr)
# Read File
churn_df <- read.csv("Telco_Customer_Churn.csv")
# Check for NAs
summary(churn_df)
# Remove NAs
churn_df <- na.omit(churn_df)
# Data Wrangling
churn_df$MultipleLines[churn_df$MultipleLines=="No phone service"] <- as.factor("No")
churn_df$OnlineSecurity[churn_df$OnlineSecurity=="No internet service"] <- as.factor("No")
churn_df$OnlineBackup[churn_df$OnlineBackup=="No internet service"] <- as.factor("No")
churn_df$DeviceProtection[churn_df$DeviceProtection=="No internet service"] <- as.factor("No")
churn_df$TechSupport[churn_df$TechSupport=="No internet service"] <- as.factor("No")
churn_df$StreamingTV[churn_df$StreamingTV=="No internet service"] <- as.factor("No")
churn_df$StreamingMovies[churn_df$StreamingMovies=="No internet service"] <- as.factor("No")
churn_df$SeniorCitizen[churn_df$SeniorCitizen==0]<- "No"
churn_df$SeniorCitizen[churn_df$SeniorCitizen==1]<- "Yes"
# Categorizing tenure
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return("0-12 months")
}else if(tenure > 12 & tenure <= 24){
return("12-24 months")
}else if (tenure > 24 & tenure <= 48){
return("24-48 months")
}else if (tenure > 48 & tenure <=60){
return("48-60 months")
}else if (tenure > 60){
return("> 60 months")
}
}
churn_df$tenure_group <- as.factor(churn_df$tenure_group)
churn_df$tenure_group <- sapply(churn_df$tenure,group_tenure)
churn_df$tenure_group <- as.factor(churn_df$tenure_group)
churn_df$tenure <- NULL
library(dplyr)
library(corrplot)
library(RColorBrewer)
# Correlation plot b/w numerical columns
churn_corr <- select(churn_df,MonthlyCharges,TotalCharges)
corr <- cor(churn_corr)
corrplot(corr,method="number",type="upper", order="hclust")
# Since total charges and monthly charges are highly correlated, reomove total
churn_df$TotalCharges <- NULL
corrplot(corr,method="number",type="upper", order="hclust")
# Since total charges and monthly charges are highly correlated, reomove total
churn_df$TotalCharges <- NULL
churn_df$customerID <- NULL
```{r}
library(gridExtra)
library(ggplot2)
# Categorical Data Plots
p1 <- ggplot(churn_df, aes(x=gender,fill = gender)) + ggtitle("Gender") + xlab("Gender") + geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
p2 <- ggplot(churn_df, aes(x=SeniorCitizen,fill = SeniorCitizen)) + ggtitle("Senior Citizen") + xlab("Senior Citizen") + geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
p3 <- ggplot(churn_df, aes(x=Partner,fill=Partner)) + ggtitle("Partner") + xlab("Partner") + geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
grid.arrange(p1, p2, p3, p4, ncol=2)
library(gridExtra)
library(ggplot2)
# Categorical Data Plots
p1 <- ggplot(churn_df, aes(x=gender,fill = gender)) + ggtitle("Gender") + xlab("Gender") + geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
p2 <- ggplot(churn_df, aes(x=SeniorCitizen,fill = SeniorCitizen)) + ggtitle("Senior Citizen") + xlab("Senior Citizen") + geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
p3 <- ggplot(churn_df, aes(x=Partner,fill=Partner)) + ggtitle("Partner") + xlab("Partner") + geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
p4 <- ggplot(churn_df, aes(x=Dependents,fill = Dependents)) + ggtitle("Dependents") + xlab("Dependents") + geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
grid.arrange(p1, p2, p3, p4, ncol=2)
```{r}
fig2 <- plot_ly()
fig2 <- fig2 %>%
add_pie(data = count(churn_df,PhoneService),labels = ~PhoneService, values = ~n,name="PhoneService",domain = list(row = 0, column = 0))
fig2 <- fig2 %>%
add_pie(data = count(churn_df,MultipleLines),labels = ~MultipleLines, values = ~n,name="MultipleLines",domain = list(row = 0, column = 1))
library(plotly)
fig2 <- plot_ly()
fig2 <- fig2 %>%
add_pie(data = count(churn_df,PhoneService),labels = ~PhoneService, values = ~n,name="PhoneService",domain = list(row = 0, column = 0))
fig2 <- fig2 %>%
add_pie(data = count(churn_df,MultipleLines),labels = ~MultipleLines, values = ~n,name="MultipleLines",domain = list(row = 0, column = 1))
fig2 <- fig2 %>%
add_pie(data = count(churn_df,InternetService),labels = ~InternetService, values = ~n,name="InternetService",domain = list(row = 1, column = 0))
fig2 <- fig2 %>%
add_pie(data = count(churn_df,OnlineSecurity),labels = ~OnlineSecurity, values = ~n,name="OnlineSecurity",domain = list(row = 1, column = 1))
fig2 <- fig2 %>% layout(annotations = list(
list(x=0.2,y= 1.07,text="PhoneService",showarrow = F, xref='paper', yref='paper'), list(x=0.8, y=0.95, text="MultipleLines", xref='paper', yref='paper'), list(x=0.25,y=0.5, text="InternetService", showarrow = F, xref='paper', yref='paper'), list(x=0.8, y=0.5, text="OnlineSecurity", showarrow = F, xref='paper', yref='paper')
), showlegend = T, grid=list(rows=2, columns=2))
fig2
fig2 <- fig2 %>% layout(annotations = list(
list(x=0.2,y= 1.07,text="PhoneService",showarrow = F, xref='paper', yref='paper'), list(x=0.8, y=0.95, text="MultipleLines", xref='paper', yref='paper'), list(x=0.25,y=0.5, text="InternetService", showarrow = F, xref='paper', yref='paper'), list(x=0.8, y=0.5, text="OnlineSecurity", showarrow = F, xref='paper', yref='paper')
), showlegend = T, grid=list(rows=2, columns=2))
fig2
```{r}
fig3 <- plot_ly()
fig3 <- fig3 %>%
add_pie(data = count(churn_df,OnlineBackup),labels = ~OnlineBackup, values = ~n,name="OnlineBackup",domain = list(x = c(0, 0.4), y = c(0.4, 1)))
fig3 <- fig3 %>%
add_pie(data = count(churn_df,DeviceProtection),labels = ~DeviceProtection, values = ~n,name="DeviceProtection",domain = list(x = c(0.6, 1), y = c(0.4, 1)))
fig3 <- fig3 %>%
add_pie(data = count(churn_df,TechSupport),labels = ~TechSupport, values = ~n,name="TechSupport",domain = list(x = c(0.25, 0.75), y = c(0, 0.6)))
fig3 <- fig3 %>% layout(annotations = list(
list(x=0.2,y= 1.07,text="OnlineBackup",showarrow = F, xref='paper', yref='paper'), list(x=0.8, y=0.95, text="DeviceProtection", xref='paper', yref='paper'), list(x=0.5,y=0.7, text="TechSupport", showarrow = F, xref='paper', yref='paper')), showlegend = T)
fig3
fig3 <- fig3 %>% layout(annotations = list(
list(x=0.2,y= 1.07,text="OnlineBackup",showarrow = F, xref='paper', yref='paper'), list(x=0.8, y=0.95, text="DeviceProtection", xref='paper', yref='paper'), list(x=0.5,y=0.7, text="TechSupport", showarrow = F, xref='paper', yref='paper')), showlegend = T)
fig3
```{r}
fig4 <- plot_ly()
fig4 <- fig4 %>%
add_pie(data = count(churn_df,StreamingTV),labels = ~StreamingTV, values = ~n,name="StreamingTV",domain = list(x = c(0, 0.4), y = c(0.4, 1)))
fig4 <- fig4 %>% layout(annotations = list(
list(x=0.15,y= 1.07,text="StreamingTV",showarrow = F, xref='paper', yref='paper'), list(x=0.8, y=0.95, text="StreamingMovies", xref='paper', yref='paper')), showlegend = T)
fig4
fig4 <- plot_ly()
fig4 <- fig4 %>%
add_pie(data = count(churn_df,StreamingTV),labels = ~StreamingTV, values = ~n,name="StreamingTV",domain = list(x = c(0, 0.4), y = c(0.4, 1)))
fig4 <- fig4 %>%
add_pie(data = count(churn_df,StreamingMovies),labels = ~StreamingMovies, values = ~n,name="StreamingMovies",domain = list(x = c(0.6, 1), y = c(0.4, 1)))
fig4 <- fig4 %>% layout(annotations = list(
list(x=0.15,y= 1.07,text="StreamingTV",showarrow = F, xref='paper', yref='paper'), list(x=0.8, y=0.95, text="StreamingMovies", xref='paper', yref='paper')), showlegend = T)
fig4
p1 <- ggplot(churn_df, aes(x=Contract,fill=Contract)) + ggtitle("Contract") + xlab("Contract") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
p2 <- ggplot(churn_df, aes(x=PaperlessBilling,fill=PaperlessBilling)) + ggtitle("Paperless Billing") + xlab("Paperless Billing") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
p3 <- ggplot(churn_df, aes(x=PaymentMethod,fill=PaymentMethod)) + ggtitle("Payment Method") + xlab("Payment Method") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentage") + coord_flip() + theme_minimal()
grid.arrange(p1,p2,p3,nrow=3)
# Variable Selection - Stepwise Regression
fit <- glm(Churn~.,data = churn_df,family = binomial(link = "logit"))
library(MASS)
stepAIC(fit,direction = "backward")
library(leaps)
leaps <- regsubsets(Churn~., data = churn_df)
plot(leaps,scale = "adjr2")
library(caret)
# Split to training and test
churn_lr <- churn_df
churn_lr$Churn <- 1 * (churn_lr$Churn == "Yes")
intrain<- createDataPartition(churn_lr$Churn,p=0.7,list=FALSE)
set.seed(20)
train_lr<- churn_lr[intrain,]
test_lr<- churn_lr[-intrain,]
lr_model <- glm(Churn~.,data = train_lr,family = binomial(link = "logit"))
summary(lr_model)
test_lr_predict1<- predict(lr_model,test_lr)
#train_lr_predict1 <- predict(lr_model,train_lr)
test_lr_predict <- factor(ifelse(test_lr_predict1 >= 0.5, "1", "0"))
#train_lr_predict1 <- factor(ifelse(train_lr_predict1 >= 0.5, "1", "0"))
confusionMatrix(data = test_lr_predict, reference = as.factor(test_lr$Churn))
# Logistic model - using stepAIC
lr_aic_model <- glm(formula = Churn ~ SeniorCitizen + Dependents + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group, family = binomial(link = "logit"), data = train_lr)
summary(lr_aic_model)
test_lr_predict2 <- predict(lr_aic_model,test_lr)
test_pred2 <- factor(ifelse(test_lr_predict2 >= 0.5, "1", "0"))
confusionMatrix(data = test_pred2, reference = as.factor(test_lr$Churn))
lr_predict3 <- predict(lr_model3,test_lr)
lr_model3 <- glm(Churn~PhoneService+DeviceProtection+StreamingTV+PaperlessBilling+tenure_group+InternetService,data = train_lr)
summary(lr_model3)
lr_predict3 <- predict(lr_model3,test_lr)
test_pred3 <- factor(ifelse(lr_predict3 >= 0.5, "1", "0"))
confusionMatrix(data = test_pred3, reference = as.factor(test_lr$Churn))
roc(test_lr$Churn,lr_predict3,plot=TRUE,print.auc=TRUE)
library(pROC)
roc(test_lr$Churn,lr_predict3,plot=TRUE,print.auc=TRUE)
# Decision Tree
library(partykit)
# constructig tree - AIC variables
tree1 <- ctree(Churn ~ as.factor(SeniorCitizen) + Dependents + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group,train_lr)
library(rpart)
r1<- rpart(Churn ~ as.factor(SeniorCitizen) + Dependents + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group,train_lr)
p1 <- predict(r1,test_lr)
confusionMatrix(p1,test_lr$Churn)
confusionMatrix(p1,as.factor(test_lr$Churn))
p1 <- predict(r1,test_lr)
p1_factor <- factor(ifelse(p1 >= 0.5, "1", "0"))
confusionMatrix(p1,as.factor(test_lr$Churn))
confusionMatrix(p1_factor,as.factor(test_lr$Churn))
r1<- rpart(Churn ~ as.factor(SeniorCitizen) + Dependents + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group,train_lr,parms=list(split=c("information","gini")))
p1 <- predict(r1,test_lr)
p1_factor <- factor(ifelse(p1 >= 0.5, "1", "0"))
confusionMatrix(p1_factor,as.factor(test_lr$Churn))
rpart.plot(r1)
library(rpart.plot)
rpart.plot(r1)
r1<- rpart(Churn ~ as.factor(SeniorCitizen) + Dependents + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group,train_lr,parms=list(split=c("information","gini")),method = "class")
rpart.plot(r1)
p1 <- predict(r1,test_lr)
p1_factor <- factor(ifelse(p1 >= 0.5, "1", "0"))
confusionMatrix(p1_factor,as.factor(test_lr$Churn))
r1<- rpart(Churn ~ as.factor(SeniorCitizen) + Dependents + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group,train_lr,parms=list(split=c("information","gini")))
rpart.plot(r1)
p1 <- predict(r1,test_lr)
p1_factor <- factor(ifelse(p1 >= 0.5, "1", "0"))
confusionMatrix(p1_factor,as.factor(test_lr$Churn))
r2<- rpart(Churn~PhoneService+DeviceProtection+StreamingTV+PaperlessBilling+tenure_group+InternetService,parms=list(split=c("information","gini")))
r2<- rpart(Churn~PhoneService+DeviceProtection+StreamingTV+PaperlessBilling+tenure_group+InternetService,train_lr,parms=list(split=c("information","gini")))
rpart.plot(r2)
p1 <- predict(r2,test_lr)
p1_factor <- factor(ifelse(p1 >= 0.5, "1", "0"))
p2 <- predict(r2,test_lr)
p2_factor <- factor(ifelse(p2 >= 0.5, "1", "0"))
confusionMatrix(p2_factor,as.factor(test_lr$Churn))
rmse1 <- rmse(test_lr_predict1,test_lr$Churn)
rmse2 <- rmse(test_lr_predict2,test_lr$Churn)
rmse3 <- rmse(lr_predict3,test_lr$Churn)
rmse4 <- rmse(pred_tree1,test_lr$Churn)
rmse4 <- rmse(p1_factor,test_lr$Churn)
rmse4 <- rmse(p1_factor,test_lr$Churn)
rmse4 <- rmse(p1,test_lr$Churn)
rmse5 <- rmse(p2,test_lr$Churn)
r1<- rpart(Churn ~ as.factor(SeniorCitizen) + Dependents + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group,train_lr,parms=list(split=c("information","gini")))
rpart.plot(r1)
p1 <- predict(r1,test_lr)
p1_factor <- factor(ifelse(p1 >= 0.5, "1", "0"))
confusionMatrix(p1_factor,as.factor(test_lr$Churn))
r2<- rpart(Churn~PhoneService+DeviceProtection+StreamingTV+PaperlessBilling+tenure_group+InternetService,train_lr,parms=list(split=c("information","gini")))
rpart.plot(r2)
p2 <- predict(r2,test_lr)
p2_factor <- factor(ifelse(p2 >= 0.5, "1", "0"))
confusionMatrix(p2_factor,as.factor(test_lr$Churn))
rpart.plot(r2)
rpart.plot(r1)
# Logistic model - using stepAIC
lr_aic_model <- glm(formula = Churn ~ SeniorCitizen + MultipleLines + InternetService + OnlineSecurity + TechSupport + StreamingTV + StreamingMovies + Contract + PaperlessBilling + PaymentMethod + MonthlyCharges + tenure_group, family = binomial(link = "logit"), data = train_lr)
summary(lr_aic_model)
test_lr_predict2 <- predict(lr_aic_model,test_lr)
test_pred2 <- factor(ifelse(test_lr_predict2 >= 0.5, "1", "0"))
confusionMatrix(data = test_pred2, reference = as.factor(test_lr$Churn))
# Read File
churn_df <- read.csv("Telco_Customer_Churn.csv")
# Check for NAs
summary(churn_df)
# Read File
churn_df <- read.csv("Telco_Customer_Churn.csv")
# Check for NAs
summary(churn_df)
# Remove NAs
churn_df <- na.omit(churn_df)
cc <- churn_df
# Data Wrangling
churn_df$MultipleLines[churn_df$MultipleLines=="No phone service"] <- as.factor("No")
churn_df$OnlineSecurity[churn_df$OnlineSecurity=="No internet service"] <- as.factor("No")
churn_df$OnlineBackup[churn_df$OnlineBackup=="No internet service"] <- as.factor("No")
churn_df$DeviceProtection[churn_df$DeviceProtection=="No internet service"] <- as.factor("No")
churn_df$TechSupport[churn_df$TechSupport=="No internet service"] <- as.factor("No")
churn_df$StreamingTV[churn_df$StreamingTV=="No internet service"] <- as.factor("No")
churn_df$StreamingMovies[churn_df$StreamingMovies=="No internet service"] <- as.factor("No")
churn_df$SeniorCitizen[churn_df$SeniorCitizen==0]<- "No"
churn_df$SeniorCitizen[churn_df$SeniorCitizen==1]<- "Yes"
# Categorizing tenure
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return("0-12 months")
}else if(tenure > 12 & tenure <= 24){
return("12-24 months")
}else if (tenure > 24 & tenure <= 48){
return("24-48 months")
}else if (tenure > 48 & tenure <=60){
return("48-60 months")
}else if (tenure > 60){
return("> 60 months")
}
}
churn_df$tenure_group <- sapply(churn_df$tenure,group_tenure)
churn_df$tenure_group <- as.factor(churn_df$tenure_group)
churn_df$tenure <- NULL
library(dplyr)
library(corrplot)
library(RColorBrewer)
# Correlation plot b/w numerical columns
churn_corr <- select(churn_df,MonthlyCharges,TotalCharges)
corr <- cor(churn_corr)
# Correlation plot b/w numerical columns
churn_corr <- select(churn_df,MonthlyCharges,TotalCharges)
library(dplyr)
# Read File
churn_df <- read.csv("Telco_Customer_Churn.csv")
# Check for NAs
summary(churn_df)
# Remove NAs
churn_df <- na.omit(churn_df)
cc <- churn_df
# Data Wrangling
churn_df$MultipleLines[churn_df$MultipleLines=="No phone service"] <- as.factor("No")
churn_df$OnlineSecurity[churn_df$OnlineSecurity=="No internet service"] <- as.factor("No")
churn_df$OnlineBackup[churn_df$OnlineBackup=="No internet service"] <- as.factor("No")
churn_df$DeviceProtection[churn_df$DeviceProtection=="No internet service"] <- as.factor("No")
churn_df$TechSupport[churn_df$TechSupport=="No internet service"] <- as.factor("No")
churn_df$StreamingTV[churn_df$StreamingTV=="No internet service"] <- as.factor("No")
churn_df$StreamingMovies[churn_df$StreamingMovies=="No internet service"] <- as.factor("No")
churn_df$SeniorCitizen[churn_df$SeniorCitizen==0]<- "No"
churn_df$SeniorCitizen[churn_df$SeniorCitizen==1]<- "Yes"
library(dplyr)
library(corrplot)
library(RColorBrewer)
# Correlation plot b/w numerical columns
churn_corr <- select(churn_df,MonthlyCharges,TotalCharges)
corr <- cor(churn_corr)
corrplot(corr,method="number",type="upper", order="hclust")
# Since total charges and monthly charges are highly correlated, reomove total
churn_df$TotalCharges <- NULL
churn_df$customerID <- NULL
# Correlation plot b/w numerical columns
churn_corr <- select(churn_df,MonthlyCharges,TotalCharges)
# Read File
churn_df <- read.csv("Telco_Customer_Churn.csv")
# Check for NAs
summary(churn_df)
# Remove NAs
churn_df <- na.omit(churn_df)
cc <- churn_df
# Data Wrangling
churn_df$MultipleLines[churn_df$MultipleLines=="No phone service"] <- as.factor("No")
churn_df$OnlineSecurity[churn_df$OnlineSecurity=="No internet service"] <- as.factor("No")
churn_df$OnlineBackup[churn_df$OnlineBackup=="No internet service"] <- as.factor("No")
churn_df$DeviceProtection[churn_df$DeviceProtection=="No internet service"] <- as.factor("No")
churn_df$TechSupport[churn_df$TechSupport=="No internet service"] <- as.factor("No")
churn_df$StreamingTV[churn_df$StreamingTV=="No internet service"] <- as.factor("No")
churn_df$StreamingMovies[churn_df$StreamingMovies=="No internet service"] <- as.factor("No")
churn_df$SeniorCitizen[churn_df$SeniorCitizen==0]<- "No"
churn_df$SeniorCitizen[churn_df$SeniorCitizen==1]<- "Yes"
# Categorizing tenure
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return("0-12 months")
}else if(tenure > 12 & tenure <= 24){
return("12-24 months")
}else if (tenure > 24 & tenure <= 48){
return("24-48 months")
}else if (tenure > 48 & tenure <=60){
return("48-60 months")
}else if (tenure > 60){
return("> 60 months")
}
}
churn_df$tenure_group <- sapply(churn_df$tenure,group_tenure)
churn_df$tenure_group <- as.factor(churn_df$tenure_group)
churn_df$tenure <- NULL
library(dplyr)
library(corrplot)
library(RColorBrewer)
# Correlation plot b/w numerical columns
churn_corr <- select(churn_df,MonthlyCharges,TotalCharges)
corr <- cor(churn_corr)
corrplot(corr,method="number",type="upper", order="hclust")
# Since total charges and monthly charges are highly correlated, reomove total
churn_df$TotalCharges <- NULL
churn_df$customerID <- NULL
hurn_corr <- select(churn_df,MonthlyCharges,TotalCharges)
# Read File
churn_df <- read.csv("Telco_Customer_Churn.csv")
# Check for NAs
summary(churn_df)
cc <- churn_df
# Data Wrangling
churn_df$MultipleLines[churn_df$MultipleLines=="No phone service"] <- as.factor("No")
churn_df$OnlineSecurity[churn_df$OnlineSecurity=="No internet service"] <- as.factor("No")
churn_df$OnlineBackup[churn_df$OnlineBackup=="No internet service"] <- as.factor("No")
churn_df$DeviceProtection[churn_df$DeviceProtection=="No internet service"] <- as.factor("No")
churn_df$TechSupport[churn_df$TechSupport=="No internet service"] <- as.factor("No")
churn_df$StreamingTV[churn_df$StreamingTV=="No internet service"] <- as.factor("No")
churn_df$StreamingMovies[churn_df$StreamingMovies=="No internet service"] <- as.factor("No")
churn_df$SeniorCitizen[churn_df$SeniorCitizen==0]<- "No"
churn_df$SeniorCitizen[churn_df$SeniorCitizen==1]<- "Yes"
# Read File
churn_df <- read.csv("Telco_Customer_Churn.csv")
# Check for NAs
summary(churn_df)
# Remove NAs
churn_df <- na.omit(churn_df)
cc <- churn_df
# Data Wrangling
churn_df$MultipleLines[churn_df$MultipleLines=="No phone service"] <- as.factor("No")
churn_df$OnlineSecurity[churn_df$OnlineSecurity=="No internet service"] <- as.factor("No")
churn_df$OnlineBackup[churn_df$OnlineBackup=="No internet service"] <- as.factor("No")
churn_df$DeviceProtection[churn_df$DeviceProtection=="No internet service"] <- as.factor("No")
churn_df$TechSupport[churn_df$TechSupport=="No internet service"] <- as.factor("No")
churn_df$StreamingTV[churn_df$StreamingTV=="No internet service"] <- as.factor("No")
churn_df$StreamingMovies[churn_df$StreamingMovies=="No internet service"] <- as.factor("No")
churn_df$SeniorCitizen[churn_df$SeniorCitizen==0]<- "No"
churn_df$SeniorCitizen[churn_df$SeniorCitizen==1]<- "Yes"
